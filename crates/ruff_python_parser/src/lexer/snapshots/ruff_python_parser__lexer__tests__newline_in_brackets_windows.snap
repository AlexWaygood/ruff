---
source: crates/ruff_python_parser/src/lexer/mod.rs
expression: tokens
---
[
    Token {
        kind: Identifier,
        length: 1,
        value: Some(
            "x",
        ),
        flags: TokenFlags(
            0x0,
        ),
    },
    Token {
        kind: Whitespace,
        length: 1,
        value: None,
        flags: TokenFlags(
            0x0,
        ),
    },
    Token {
        kind: Equal,
        length: 1,
        value: None,
        flags: TokenFlags(
            0x0,
        ),
    },
    Token {
        kind: Whitespace,
        length: 1,
        value: None,
        flags: TokenFlags(
            0x0,
        ),
    },
    Token {
        kind: Lsqb,
        length: 1,
        value: None,
        flags: TokenFlags(
            0x0,
        ),
    },
    Token {
        kind: NonLogicalNewline,
        length: 2,
        value: None,
        flags: TokenFlags(
            0x0,
        ),
    },
    Token {
        kind: NonLogicalNewline,
        length: 2,
        value: None,
        flags: TokenFlags(
            0x0,
        ),
    },
    Token {
        kind: Whitespace,
        length: 8,
        value: None,
        flags: TokenFlags(
            0x0,
        ),
    },
    Token {
        kind: Int,
        length: 1,
        value: Some(
            "1",
        ),
        flags: TokenFlags(
            0x0,
        ),
    },
    Token {
        kind: Comma,
        length: 1,
        value: None,
        flags: TokenFlags(
            0x0,
        ),
    },
    Token {
        kind: Int,
        length: 1,
        value: Some(
            "2",
        ),
        flags: TokenFlags(
            0x0,
        ),
    },
    Token {
        kind: NonLogicalNewline,
        length: 2,
        value: None,
        flags: TokenFlags(
            0x0,
        ),
    },
    Token {
        kind: Whitespace,
        length: 4,
        value: None,
        flags: TokenFlags(
            0x0,
        ),
    },
    Token {
        kind: Comma,
        length: 1,
        value: None,
        flags: TokenFlags(
            0x0,
        ),
    },
    Token {
        kind: Lpar,
        length: 1,
        value: None,
        flags: TokenFlags(
            0x0,
        ),
    },
    Token {
        kind: Int,
        length: 1,
        value: Some(
            "3",
        ),
        flags: TokenFlags(
            0x0,
        ),
    },
    Token {
        kind: Comma,
        length: 1,
        value: None,
        flags: TokenFlags(
            0x0,
        ),
    },
    Token {
        kind: NonLogicalNewline,
        length: 2,
        value: None,
        flags: TokenFlags(
            0x0,
        ),
    },
    Token {
        kind: Whitespace,
        length: 4,
        value: None,
        flags: TokenFlags(
            0x0,
        ),
    },
    Token {
        kind: Int,
        length: 1,
        value: Some(
            "4",
        ),
        flags: TokenFlags(
            0x0,
        ),
    },
    Token {
        kind: Comma,
        length: 1,
        value: None,
        flags: TokenFlags(
            0x0,
        ),
    },
    Token {
        kind: NonLogicalNewline,
        length: 2,
        value: None,
        flags: TokenFlags(
            0x0,
        ),
    },
    Token {
        kind: Whitespace,
        length: 4,
        value: None,
        flags: TokenFlags(
            0x0,
        ),
    },
    Token {
        kind: Rpar,
        length: 1,
        value: None,
        flags: TokenFlags(
            0x0,
        ),
    },
    Token {
        kind: Comma,
        length: 1,
        value: None,
        flags: TokenFlags(
            0x0,
        ),
    },
    Token {
        kind: Whitespace,
        length: 1,
        value: None,
        flags: TokenFlags(
            0x0,
        ),
    },
    Token {
        kind: Lbrace,
        length: 1,
        value: None,
        flags: TokenFlags(
            0x0,
        ),
    },
    Token {
        kind: NonLogicalNewline,
        length: 2,
        value: None,
        flags: TokenFlags(
            0x0,
        ),
    },
    Token {
        kind: Whitespace,
        length: 4,
        value: None,
        flags: TokenFlags(
            0x0,
        ),
    },
    Token {
        kind: Int,
        length: 1,
        value: Some(
            "5",
        ),
        flags: TokenFlags(
            0x0,
        ),
    },
    Token {
        kind: Comma,
        length: 1,
        value: None,
        flags: TokenFlags(
            0x0,
        ),
    },
    Token {
        kind: NonLogicalNewline,
        length: 2,
        value: None,
        flags: TokenFlags(
            0x0,
        ),
    },
    Token {
        kind: Whitespace,
        length: 4,
        value: None,
        flags: TokenFlags(
            0x0,
        ),
    },
    Token {
        kind: Int,
        length: 1,
        value: Some(
            "6",
        ),
        flags: TokenFlags(
            0x0,
        ),
    },
    Token {
        kind: Comma,
        length: 1,
        value: None,
        flags: TokenFlags(
            0x0,
        ),
    },
    Token {
        kind: LineContinuation,
        length: 1,
        value: None,
        flags: TokenFlags(
            0x0,
        ),
    },
    Token {
        kind: NonLogicalNewline,
        length: 2,
        value: None,
        flags: TokenFlags(
            0x0,
        ),
    },
    Token {
        kind: Whitespace,
        length: 4,
        value: None,
        flags: TokenFlags(
            0x0,
        ),
    },
    Token {
        kind: Int,
        length: 1,
        value: Some(
            "7",
        ),
        flags: TokenFlags(
            0x0,
        ),
    },
    Token {
        kind: Rbrace,
        length: 1,
        value: None,
        flags: TokenFlags(
            0x0,
        ),
    },
    Token {
        kind: Rsqb,
        length: 1,
        value: None,
        flags: TokenFlags(
            0x0,
        ),
    },
    Token {
        kind: Newline,
        length: 2,
        value: None,
        flags: TokenFlags(
            0x0,
        ),
    },
    Token {
        kind: Whitespace,
        length: 4,
        value: None,
        flags: TokenFlags(
            0x0,
        ),
    },
    Token {
        kind: EndOfFile,
        length: 0,
        value: None,
        flags: TokenFlags(
            0x0,
        ),
    },
]
